//BSEdit.cpp - VSTGUI editor file, automatically generated by VSTGUI Builder

#include <stdio.h>
#include "BSEdit.h"
#include "bernspitch.h"

void floatToFreq (float value, char* string)

{
	if (value < 1000)
	{
		sprintf (string, "%dHz", (int)(value));
	}

	else
	{
		sprintf (string, "%2.1fKhz", (value/1000));
	}
};

void floatToSemitones (float value, char* string)

{
	if (value > 0.5)
	{
		sprintf (string, "+%1.1f", ((value *24)-12));
	}

	if (value < 0.5)
	{
		sprintf (string, "%1.1f", ((value *24)-12));
	}

	if (value == 0.5)
	{
		sprintf (string, "==");
	}

};

enum
{
    kMknob_med = 1,
	kknob_med = 100,
	kBack = 128,
    kbutton_sm,
};

//--------------------------------
BSEdit::BSEdit(AudioEffect *effect) : AEffGUIEditor(effect)
{
    tap1 = 0;
    tap2 = 0;
    tap3 = 0;
    tap4 = 0;
    shift1 = 0;
    shift2 = 0;
    shift3 = 0;
    shift4 = 0;
    vol1 = 0;
    vol2 = 0;
    vol3 = 0;
    vol4 = 0;
    discrete = 0;
    pitchdisplay1 = 0;
    pitchdisplay2 = 0;
    pitchdisplay3 = 0;
    pitchdisplay4 = 0;
    voldisplay1 = 0;
    voldisplay2 = 0;
    voldisplay3 = 0;
    voldisplay4 = 0;
    tapdisplay1 = 0;
    tapdispaly2 = 0;
    tapdisplay3 = 0;
    tapdisplay4 = 0;

    hknob_med = 0;
    hknob_med = 0;
    hbutton_sm = 0;

    hBack  = new CBitmap(kBack);

    rect.left   = 0;
    rect.top    = 0;
    rect.right  = (short)hBack->getWidth();
    rect.bottom = (short)hBack->getHeight();
}

//--------------------------------
BSEdit::~BSEdit()
{
// free the background bitmap

	if (hBack)
		hBack->forget ();
	hBack = 0;
	
	/*if(hBack)
    {
        if(hBack->getNbReference()<=1)
        {
            hBack->forget();
            hBack = 0;
        }
        else
            hBack->forget();
    }*/
}

//--------------------------------
bool BSEdit::open(void *ptr)
{
    AEffGUIEditor::open(ptr);
	
	hknob_med = new CBitmap(kknob_med);
    hMknob_med = new CBitmap(kMknob_med);
	hbutton_sm = new CBitmap(kbutton_sm);

	CRect size (0, 0, hBack->getWidth (), hBack->getHeight ());
	CFrame* lFrame = new CFrame (size, ptr, this);
	lFrame->setBackground (hBack); //NEW!

	//CRect size, temp;
    CPoint point;
	
    
    //size(0, 0, hBack->getWidth(), hBack->getHeight());
    //frame = new CFrame(size, ptr, this);
    //frame->setBackground(hBack);
	
	//LCD

	size(387, 32, 606, 177); // or wherever it should be
	punto = new lcd(size);
		
	for (int k = 0; k < kNumParams; k++)

	{ switch(k)
	{
	case kpitch1parm:
    case kpitch2parm:
    case kpitch3parm:
    case kpitch4parm: 

		punto->setPitchParams(effect->getParameter(k),k);
		break;

	case kvol1parm:
    case kvol2parm:
	case kvol3parm:
    case kvol4parm: 

		punto->setVolParams(effect->getParameter(k),(k-4));
		break;

	case ktap1parm:
	case ktap2parm:
	case ktap3parm:
	case ktap4parm:


		//Parameter depends on plug's internal value, hence the cast on the public array tap[].

		punto->setTapParams( ((PhaseVoc*)effect)->tap[k-8],(k-8));
		break;
	}
	}

	lFrame->addView(punto); //AFTER to visualize default parameters
	punto->setDirty(true);

	
    //--tap1--------
    size(388, 205, (388+46), (205+49));
    point(0, 0);
    tap1 = new CAnimKnob(size, this, ktap1parm, 37, 50, hMknob_med, point);
    tap1->setValue(effect->getParameter(ktap1parm));
    tap1->setTransparency(0);
    lFrame->addView(tap1);

    //--tap2--------
    size(442, 205, (442+46), (205+49));
    point(0, 0);
    tap2 = new CAnimKnob(size, this, ktap2parm, 37, 50, hMknob_med, point);
    tap2->setValue(effect->getParameter(ktap2parm));
    tap2->setTransparency(0);
    lFrame->addView(tap2);

    //--tap3--------
    size(499, 205, (499+46), (205+49));
    point(0, 0);
    tap3 = new CAnimKnob(size, this, ktap3parm, 37, 50, hMknob_med, point);
    tap3->setValue(effect->getParameter(ktap3parm));
    tap3->setTransparency(0);
    lFrame->addView(tap3);

    //--tap4--------
    size(557, 205, (557+46), (205+49));
    point(0, 0);
    tap4 = new CAnimKnob(size, this, ktap4parm, 37, 50, hMknob_med, point);
    tap4->setValue(effect->getParameter(ktap4parm));
    tap4->setTransparency(0);
    lFrame->addView(tap4);

    //--shift1--------
    size(51, 133, (51+48), (133+48));
    point(0, 0);
    shift1 = new CAnimKnob(size, this, kpitch1parm, 39, 48, hknob_med, point);
    shift1->setValue(effect->getParameter(kpitch2parm));
    shift1->setTransparency(0);
    lFrame->addView(shift1);

    //--shift2--------
    size(128, 133, (128+48), (133+48));
    point(0, 0);
    shift2 = new CAnimKnob(size, this, kpitch2parm, 39, 48, hknob_med, point);
    shift2->setValue(effect->getParameter(kpitch2parm));
    shift2->setTransparency(0);
    lFrame->addView(shift2);

    //--shift3--------
    size(205, 133, (205+48), (133+48));
    point(0, 0);
    shift3 = new CAnimKnob(size, this, kpitch3parm, 39, 48, hknob_med, point);
    shift3->setValue(effect->getParameter(kpitch3parm));
    shift3->setTransparency(0);
    lFrame->addView(shift3);

    //--shift4--------
    size(284, 133, (284+48), (133+48));
    point(0, 0);
    shift4 = new CAnimKnob(size, this, kpitch4parm, 39, 48, hknob_med, point);
    shift4->setValue(effect->getParameter(kpitch4parm));
    shift4->setTransparency(0);
    lFrame->addView(shift4);

    //--vol1--------
    size(50, 284, (50+48), (284+48));
    point(0, 0);
    vol1 = new CAnimKnob(size, this, kvol1parm, 39, 48, hknob_med, point);
    vol1->setValue(effect->getParameter(kvol1parm));
    vol1->setTransparency(0);
    lFrame->addView(vol1);

    //--vol2--------
    size(127, 284, (127+48), (284+48));
    point(0, 0);
    vol2 = new CAnimKnob(size, this, kvol2parm, 39, 48, hknob_med, point);
    vol2->setValue(effect->getParameter(kvol2parm));
    vol2->setTransparency(0);
    lFrame->addView(vol2);

    //--vol3--------
    size(204, 284, (204+48), (284+48));
    point(0, 0);
    vol3 = new CAnimKnob(size, this, kvol3parm, 39, 48, hknob_med, point);
    vol3->setValue(effect->getParameter(kvol3parm));
    vol3->setTransparency(0);
    lFrame->addView(vol3);

    //--vol4--------
    size(281, 284, (281+48), (284+48));
    point(0, 0);
    vol4 = new CAnimKnob(size, this, kvol4parm, 39, 48, hknob_med, point);
    vol4->setValue(effect->getParameter(kvol4parm));
    vol4->setTransparency(0);
    lFrame->addView(vol4);

    //--discrete--------
    size(423, 354, (423+24), (354+18));
    discrete = new COnOffButton(size, this, kdiscrete, hbutton_sm);
    discrete->setValue(effect->getParameter(kdiscrete));
    discrete->setTransparency(0);
    lFrame->addView(discrete);

	CColor DispBack;
	DispBack(168,203,131,0);
	CColor DispFont;
	DispFont(0,0,0,0);
	CColor DispShadow;
	DispShadow (255,0,0,0);

    //--pitchdisplay1--------
    size(46, 196, (46+54), (196+18));
    pitchdisplay1 = new CParamDisplay(size, 0, 0);
	pitchdisplay1->setBackColor(DispBack);
	pitchdisplay1->setFontColor(DispFont);
	pitchdisplay1->setShadowColor(DispShadow);
	pitchdisplay1->setTxtFace(kNormalFace);
    pitchdisplay1->setFont(kNumStandardFonts);
	pitchdisplay1->setValue (effect->getParameter (kpitch1parm));
	pitchdisplay1->setStringConvert (floatToSemitones);
    lFrame->addView(pitchdisplay1);

    //--pitchdisplay2--------
    size(122, 195, (122+54), (195+18));
    pitchdisplay2 = new CParamDisplay(size, 0, 0);
	pitchdisplay2->setBackColor(DispBack);
	pitchdisplay2->setFontColor(DispFont);
    pitchdisplay2->setFont(kNumStandardFonts);
	pitchdisplay2->setValue (effect->getParameter (kpitch2parm));
	pitchdisplay2->setStringConvert (floatToSemitones);
    lFrame->addView(pitchdisplay2);

    //--pitchdisplay3--------
    size(202, 196, (202+54), (196+18));
    pitchdisplay3 = new CParamDisplay(size, 0, 0);
	pitchdisplay3->setBackColor(DispBack);
	pitchdisplay3->setFontColor(DispFont);
    pitchdisplay3->setFont(kNumStandardFonts);
	pitchdisplay3->setValue (effect->getParameter (kpitch3parm));
	pitchdisplay3->setStringConvert (floatToSemitones);
    lFrame->addView(pitchdisplay3);

    //--pitchdisplay4--------
    size(278, 196, (278+54), (196+18));
    pitchdisplay4 = new CParamDisplay(size, 0, 0);
	pitchdisplay4->setBackColor(DispBack);
	pitchdisplay4->setFontColor(DispFont);
    pitchdisplay4->setFont(kNumStandardFonts);
	pitchdisplay4->setValue (effect->getParameter (kpitch4parm));
	pitchdisplay4->setStringConvert (floatToSemitones);
    lFrame->addView(pitchdisplay4);

    //--voldisplay1--------
    size(45, 346, (45+54), (346+18));
    voldisplay1 = new CParamDisplay(size, 0, 0);
	voldisplay1->setBackColor(DispBack);
	voldisplay1->setFontColor(DispFont);
    voldisplay1->setFont(kNumStandardFonts);
	voldisplay1->setValue (effect->getParameter (kvol1parm));
    lFrame->addView(voldisplay1);

    //--voldisplay2--------
    size(121, 346, (121+54), (346+18));
    voldisplay2 = new CParamDisplay(size, 0, 0);
	voldisplay2->setBackColor(DispBack);
	voldisplay2->setFontColor(DispFont);
    voldisplay2->setFont(kNumStandardFonts);
	voldisplay2->setValue (effect->getParameter (kvol2parm));
    lFrame->addView(voldisplay2);

    //--voldisplay3--------
    size(200, 346, (200+54), (346+18));
    voldisplay3 = new CParamDisplay(size, 0, 0);
	voldisplay3->setBackColor(DispBack);
	voldisplay3->setFontColor(DispFont);
    voldisplay3->setFont(kNumStandardFonts);
	voldisplay3->setValue (effect->getParameter (kvol3parm));
    lFrame->addView(voldisplay3);

    //--voldisplay4--------
    size(277, 346, (277+54), (346+18));
    voldisplay4 = new CParamDisplay(size, 0, 0);
	voldisplay4->setBackColor(DispBack);
	voldisplay4->setFontColor(DispFont);
    voldisplay4->setFont(kNumStandardFonts);
	voldisplay4->setValue (effect->getParameter (kvol4parm));
    lFrame->addView(voldisplay4);

    //--tapdisplay1--------
    size(383, 263, (383+42), (263+16));
    tapdisplay1 = new CParamDisplay(size, 0, 0);
	tapdisplay1->setBackColor(DispBack);
	tapdisplay1->setFontColor(DispFont);
    tapdisplay1->setFont(kNormalFontSmall);
	tapdisplay1->setValue(((PhaseVoc*)effect)->tap[0]);
	tapdisplay1->setStringConvert (floatToFreq);
    lFrame->addView(tapdisplay1);

    //--tapdispaly2--------
    size(440, 263, (440+42), (263+16));
    tapdispaly2 = new CParamDisplay(size, 0, 0);
	tapdispaly2->setBackColor(DispBack);
	tapdispaly2->setFontColor(DispFont);
    tapdispaly2->setFont(kNormalFontSmall);
	tapdispaly2->setValue(((PhaseVoc*)effect)->tap[1]);
	tapdispaly2->setStringConvert (floatToFreq);
    lFrame->addView(tapdispaly2);

    //--tapdisplay3--------
    size(496, 263, (496+43), (263+16));
    tapdisplay3 = new CParamDisplay(size, 0, 0);
	tapdisplay3->setBackColor(DispBack);
	tapdisplay3->setFontColor(DispFont);
    tapdisplay3->setFont(kNormalFontSmall);
	tapdisplay3->setValue(((PhaseVoc*)effect)->tap[2]);
	tapdisplay3->setStringConvert (floatToFreq);
    lFrame->addView(tapdisplay3);

    //--tapdisplay4--------
    size(555, 263, (555+43), (263+16));
    tapdisplay4 = new CParamDisplay(size, 0, 0);
	tapdisplay4->setBackColor(DispBack);
	tapdisplay4->setFontColor(DispFont);
    tapdisplay4->setFont(kNormalFontSmall);
	tapdisplay4->setValue(((PhaseVoc*)effect)->tap[3]);
	tapdisplay4->setStringConvert (floatToFreq);
    lFrame->addView(tapdisplay4);

    setKnobMode(kLinearMode);

    if(hknob_med)
        hknob_med->forget();
    if(hMknob_med)
        hMknob_med->forget();
    if(hbutton_sm)
        hbutton_sm->forget();
	
	frame = lFrame; //NNEW

    return true;
}

//--------------------------------
void BSEdit::close()
{
    if (frame)
		delete frame;
    frame = 0;

}

//--------------------------------
void BSEdit::setParameter(VstInt32 index, float value)
{
    if (frame == 0)
        return;

    switch(index)
    {

    case kpitch1parm:
        if(shift1)
            shift1->setValue(effect->getParameter(index));
		if	(pitchdisplay1)
			pitchdisplay1->setValue(effect->getParameter(index));
	    break;

    case kpitch2parm:
        if(shift2)
            shift2->setValue(effect->getParameter(index));
		if	(pitchdisplay2)
			pitchdisplay2->setValue(effect->getParameter(index));
        break;

    case kpitch3parm:
        if(shift3)
            shift3->setValue(effect->getParameter(index));
		if	(pitchdisplay3)
			pitchdisplay3->setValue(effect->getParameter(index));
        break;

    case kpitch4parm:
        if(shift4)
            shift4->setValue(effect->getParameter(index));
		if	(pitchdisplay4)
			pitchdisplay4->setValue(effect->getParameter(index));
        break;


    case kvol1parm:
        if(vol1)
            vol1->setValue(effect->getParameter(index));
		if (voldisplay1)
			voldisplay1->setValue(effect->getParameter(index));
        break;

    case kvol2parm:
        if(vol2)
            vol2->setValue(effect->getParameter(index));
		if (voldisplay2)
			voldisplay2->setValue(effect->getParameter(index));
        break;

    case kvol3parm:
        if(vol3)
            vol3->setValue(effect->getParameter(index));
		if (voldisplay3)
			voldisplay3->setValue(effect->getParameter(index));
        break;

    case kvol4parm:
        if(vol4)
            vol4->setValue(effect->getParameter(index));
		if (voldisplay4)
			voldisplay4->setValue(effect->getParameter(index));
        break;

		    case ktap1parm:
        if(tap1)
            tap1->setValue(effect->getParameter(index));
		if(tapdisplay1)
			//tapdisplay1->setValue(effect->getParameter(index));
			  tapdisplay1->setValue(((PhaseVoc*)effect)->tap[index-8]);
        break;

    case ktap2parm:
        if(tap2)
            tap2->setValue(effect->getParameter(index));
		if(tapdispaly2)
			tapdispaly2->setValue(((PhaseVoc*)effect)->tap[index-8]);
		break;

    case ktap3parm:
        if(tap3)
            tap3->setValue(effect->getParameter(index));
		if(tapdisplay3)
			tapdisplay3->setValue(((PhaseVoc*)effect)->tap[index-8]);
        break;

    case ktap4parm:
        if(tap4)
            tap4->setValue(effect->getParameter(index));
		if(tapdisplay4)
			tapdisplay4->setValue(((PhaseVoc*)effect)->tap[index-8]);
        break;


    case kdiscrete:	
        if(discrete)
            discrete->setValue(effect->getParameter(index));
        break;
    }
    //postUpdate();
}


//--------------------------------
void BSEdit::valueChanged(CDrawContext* context, CControl* control)
{
    //char tempch[64];
				    long tag = control->getTag();

    switch(tag)
    {
    case ktap1parm:
	case ktap2parm:
	case ktap3parm:
	case ktap4parm:
		effect->setParameterAutomated(tag, control->getValue());
		control->setDirty ();
		break;

	case kpitch1parm:
    case kpitch2parm:
    case kpitch3parm:
    case kpitch4parm:
        effect->setParameterAutomated(tag, control->getValue());
		punto->setPitchParams(control->getValue(), tag);
		control->setDirty ();
        break;

	case kvol1parm:
    case kvol2parm:
	case kvol3parm:
    case kvol4parm:
        effect->setParameterAutomated(tag, control->getValue());
		punto->setVolParams(control->getValue(), (tag-4));
		control->setDirty ();
        break;
    
	case kdiscrete:	
		effect->setParameterAutomated(tag, control->getValue());
        break;
	}
};


//}

//--------------------------------
//void BSEdit::idle()
//{
//    AEffGUIEditor::idle();

//}
			